/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 22.12.2021 17:04:10

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 1872;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,260 } };
const TfArray<1, float> quant0_scale = { 1, { 0.028889130800962448, } };
const TfArray<1, int> quant0_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 160, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[16] = { -928, -1077, -2259, -3650, -5470, -4403, -1326, -2016, -1141, -1304, -1054, -1134, -1495, -2854, -346, -1284, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 0.00016160083760041744, 0.00016259806579910219, 0.00012575653090607375, 0.000139318683068268, 0.00013583413965534419, 0.00015289492148440331, 0.00016522989608347416, 0.00018230346904601902, 0.0001988947915378958, 0.00016530821449123323, 0.00016861692711245269, 0.0001682350120972842, 0.00016601881361566484, 0.00015052923117764294, 0.00020732497796416283, 0.0001726786867948249, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[32] = { -318, -279, -20, 0, -553, -1054, 361, -652, -156, -1312, -578, -131, -1131, -592, -675, -108, -1078, -1258, -1152, -203, -472, -402, -670, -1137, -764, -908, -37, -633, 48, -685, -1022, -587, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 0.00016839691670611501, 0.00018470973009243608, 0.00018335599452257156, 0.00025329072377644479, 0.00014908841694705188, 6.798496178817004e-05, 0.00018233797163702548, 0.00017537672829348594, 0.00015731167513877153, 0.00022474554134532809, 0.00016204798885155469, 0.00019685407460201532, 6.5400534367654473e-05, 0.00018833117792382836, 0.00013115456386003643, 0.00019508953846525401, 0.00013171465252526104, 0.00020383689843583852, 0.00016654856153763831, 0.00016090147255454212, 0.00020758746541105211, 0.00015566831280011684, 0.00015740010712761432, 7.7209740993566811e-05, 0.00022782842279411852, 0.00014017820649314672, 0.0001645908341743052, 0.00018945979536511004, 0.00019438345043454319, 0.00024696515174582601, 0.00015800871187821031, 0.00017331320850644261, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 1299, 269, -1362, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00019356126722414047, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*160] = { 
  -22, 23, -82, 37, -45, 0, -88, 60, -42, -29, -14, 36, 12, 30, 12, 24, -21, 58, 35, -48, 22, 6, 19, 18, 13, 1, 4, -45, -47, -30, -76, -2, -22, 85, -73, 10, -41, 16, -116, 51, -16, -74, 28, 32, 5, -28, -7, 35, 24, 28, 34, -75, 21, -49, 7, 30, 4, -30, -3, -76, -50, -93, -11, 48, 29, 47, -45, 69, -12, 2, -84, -8, -41, -47, -14, 42, -7, -55, -42, 35, 16, 97, 44, -37, 86, -60, -1, -5, 34, -46, -24, -3, -26, -91, 22, 26, -24, 8, -41, 45, -6, -28, -89, 60, -95, -68, -103, 65, 16, -24, -58, 65, -58, 95, 26, -56, 59, -50, -1, 13, -29, -86, 17, -89, -73, -68, -44, -55, -73, 24, -82, 73, -11, -8, -119, 72, -73, -15, -95, 56, 30, -50, -57, 7, -26, 44, 0, -40, 73, -98, -35, 6, 44, -49, 24, 18, -114, 14, -59, 16, 
  38, 1, 40, -46, 28, 2, 13, -9, 27, 48, -13, -33, 27, -25, -9, 35, -13, -15, -37, 34, -7, 19, -28, -23, 15, 42, -72, 8, 51, -30, -4, -4, 32, 40, 87, -23, 52, 27, 0, -22, 34, -62, 37, -73, -23, 49, 20, -52, 5, -38, -43, 31, -13, 35, 26, -12, -45, 25, 3, -19, 65, -74, 21, 25, 44, 0, 53, -127, 78, 16, 20, 47, 15, -63, -10, -70, 9, -48, 5, -66, 46, -23, 22, 27, -70, 42, 17, 17, -78, 68, -31, 47, 39, -62, 30, 44, 24, -22, 51, -92, 57, 5, 60, 11, 57, -30, -17, -63, 19, -61, -5, -29, -5, -29, 0, 62, -29, 20, 53, 5, -75, 34, -20, 4, 26, -26, 36, 3, 18, -47, 27, -51, 1, 11, 31, -31, 56, -44, 28, -20, 5, -24, 1, 2, -30, 13, 12, 28, -29, 46, 5, 5, -24, 33, -32, -22, 51, -16, 12, 31, 
  -52, -57, 16, 22, 32, -5, 11, -24, -3, -52, -15, 4, -26, 13, -8, -123, -48, -1, 14, -12, 32, -18, -6, -2, -84, -28, 33, 29, -3, 36, 49, 15, -30, -87, 9, -3, -63, -7, 37, -6, -39, 86, -79, 64, -22, -66, -51, 74, -72, -42, 5, 17, -68, -32, -10, -19, 21, 27, -36, 0, -50, 76, -6, -67, -62, 49, -29, 42, -73, 18, 27, -47, -28, 84, 45, 5, 22, 39, -49, 71, -61, -73, -54, -27, 32, -31, -34, 18, 68, -64, 87, -34, 5, 93, -14, -98, -34, 47, 4, 39, -45, 27, 3, -40, 7, 75, 13, 18, 15, 103, 9, 36, -22, -65, -93, -32, 17, 28, -60, 13, 44, 32, -29, 73, 22, 53, 3, 10, 13, 15, 2, 6, -7, 17, -16, 15, -3, 49, 68, -61, 13, 27, -7, 11, -2, -49, -37, 18, -58, 5, 44, 19, 65, 10, -22, 60, -7, -25, -9, -1, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,160 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0057856668718159199, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[16*1*3*13] = { 
  /* [0][0][][] */ -118,25,49,67,-17,-27,0,18,-42,39,-100,-49,75, 4,-68,-22,35,127,-16,45,117,1,-29,6,-14,36, 83,66,60,79,16,1,-27,-55,2,29,83,-60,-38, 
  /* [1][0][][] */ -70,-17,12,-57,14,-3,108,9,30,-18,-67,-4,33, -109,-98,-42,-13,68,-60,38,-46,15,-6,97,28,-29, -76,-127,-11,-13,47,54,62,-58,-4,18,88,-44,-55, 
  /* [2][0][][] */ 51,-108,-127,-83,-24,0,37,-13,4,38,44,10,68, -37,-79,-104,100,59,-95,42,-73,-9,14,-44,-46,-45, 41,52,18,-1,-43,-58,-14,-80,-5,18,67,-58,103, 
  /* [3][0][][] */ -35,-44,80,-79,-39,57,-17,57,18,-19,17,0,36, 24,-123,127,-70,-85,-2,29,-56,76,75,-6,3,-60, 31,-89,25,-54,-12,60,1,-34,27,97,16,5,-1, 
  /* [4][0][][] */ -58,-32,47,-71,-118,-75,58,8,-4,-42,-5,-14,-14, -87,1,-10,81,-33,76,-26,15,-10,32,-64,50,68, -98,-127,104,-13,-79,5,14,-41,8,0,-85,58,57, 
  /* [5][0][][] */ 51,35,89,-52,-100,-32,-45,-81,1,-1,-41,-14,-6, 87,-24,127,-50,-86,-47,-38,-95,32,-1,-75,16,-15, 90,-7,73,23,-26,-77,-44,13,5,16,22,-6,4, 
  /* [6][0][][] */ -56,-63,34,46,-65,-2,-5,-44,-25,-44,-84,22,-18, -127,57,24,-21,-73,-14,-63,-49,-65,-55,5,0,-42, -40,-124,4,-84,66,76,-72,-85,29,-2,-7,-2,-21, 
  /* [7][0][][] */ -60,4,48,6,-43,25,21,-34,-14,14,45,60,52, -40,127,5,10,-60,73,88,51,-15,12,54,29,-21, -59,-3,84,24,-7,80,34,-2,64,52,24,-44,-7, 
  /* [8][0][][] */ -52,68,-48,97,52,127,-8,-67,17,-21,-8,6,-23, -56,40,-22,84,-8,24,-62,46,-36,-3,-33,-13,1, -81,69,-50,73,-82,40,-61,11,2,81,11,-31,25, 
  /* [9][0][][] */ 32,-30,19,-54,105,-67,51,19,18,-4,20,-12,-33, 18,78,-24,-28,-127,-25,15,28,-29,63,-47,-20,58, -76,-114,51,2,124,16,64,-2,-20,26,13,-72,19, 
  /* [10][0][][] */ -103,127,36,85,-85,70,-34,-45,12,27,-12,10,-77, -108,49,2,-28,29,-8,-3,-36,4,2,-45,52,-21, 37,-71,-60,-12,-19,16,7,38,1,-29,0,27,53, 
  /* [11][0][][] */ 74,10,-8,100,26,-1,22,-44,41,-33,54,-62,13, -93,64,81,-18,-81,12,48,-15,-14,-16,-26,18,39, -127,58,89,-29,127,-45,23,-31,16,-17,45,-26,-29, 
  /* [12][0][][] */ 71,112,40,-49,109,35,68,-7,-17,7,-44,-18,74, 47,-83,-83,14,-61,127,10,66,-63,21,6,45,-3, 1,-39,-23,69,1,6,35,64,5,68,-40,14,-40, 
  /* [13][0][][] */ 92,95,-37,-87,-127,8,-55,-12,44,-32,61,47,-57, -48,76,-41,-78,-17,13,-2,-62,85,41,31,-36,-17, -99,-51,10,-111,-55,4,-47,15,19,63,15,13,-7, 
  /* [14][0][][] */ -64,-87,-10,17,29,73,-16,26,-33,-4,-24,79,-35, -52,-61,-7,56,54,-22,-11,-28,8,0,-127,4,-15, -8,9,-20,46,-22,-22,-21,-1,31,-32,-95,45,-2, 
  /* [15][0][][] */ -3,-22,-43,-17,127,-9,74,-7,-32,-6,-21,51,29, -61,29,-88,23,72,-26,82,-68,42,-56,7,59,32, 12,-80,30,-103,26,-78,24,-87,45,14,53,-53,-12, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0055938283912837505, 0.0056283473968505859, 0.0043530743569135666, 0.004822529386729002, 0.0047019114717841148, 0.0052924724295735359, 0.0057194484397768974, 0.0063104517757892609, 0.0068847620859742165, 0.0057221595197916031, 0.0058366907760500908, 0.0058234706521034241, 0.0057467571459710598, 0.0052105835638940334, 0.0071765738539397717, 0.0059772892855107784, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[32*1*3*16] = { 
  /* [0][0][][] */ -8,-35,-32,10,91,-60,56,-7,24,111,28,28,33,29,7,-73, 52,25,55,-34,-49,-77,26,3,-31,-2,-42,23,71,16,-6,-48, -64,-104,33,-47,-127,17,-46,-24,-13,89,-48,14,48,53,2,-94, 
  /* [1][0][][] */ -96,4,-56,119,6,44,-45,-90,-28,26,17,-107,3,66,0,-64, -68,46,-54,-76,-44,26,-37,40,-47,-11,-127,-23,8,-30,-39,-77, 0,23,-7,-54,18,-89,-11,5,-27,32,-13,14,-7,-28,-8,-12, 
  /* [2][0][][] */ 1,-48,60,-47,-16,-76,31,-6,-80,18,2,31,82,55,21,-33, 31,-95,60,-43,12,5,-8,-13,-86,106,-72,54,38,9,31,-81, 35,-15,44,-8,45,-47,127,-53,-8,17,-48,19,39,46,64,-3, 
  /* [3][0][][] */ -40,-1,-9,7,36,22,-60,-43,-10,18,-96,-13,-14,-48,-74,32, -46,21,-81,41,0,68,-19,-65,-127,5,-64,-52,-60,9,-47,76, -66,5,-28,58,-27,21,-5,-4,-45,26,-21,-25,-65,14,-66,29, 
  /* [4][0][][] */ -11,24,52,-72,-127,-79,-35,-46,-28,121,-44,-49,-30,-18,-35,-40, -15,-98,96,-75,-67,-39,-60,60,-74,44,-104,-19,-18,-26,-24,-89, -11,15,42,-82,-29,-54,78,8,-11,127,-36,88,-67,121,13,-28, 
  /* [5][0][][] */ 32,-123,44,3,-78,-93,21,-68,-42,11,66,-108,-109,23,-105,-44, -31,-19,9,-79,-84,-38,-16,95,-61,-23,-72,-127,-28,-9,48,35, -117,19,5,39,-59,-15,44,-92,-19,-104,-14,34,-2,-21,1,-67, 
  /* [6][0][][] */ 79,21,41,-23,-21,1,57,-26,-104,9,10,7,24,49,-32,10, -19,-121,34,-1,-82,-47,-2,-13,-102,-6,-63,31,31,83,-87,-50, -44,-127,73,34,-34,81,-22,31,-86,26,-11,21,55,91,22,-51, 
  /* [7][0][][] */ -126,127,29,91,18,-12,53,56,-44,6,-7,-95,-57,-58,-7,-7, -35,81,-10,20,71,-91,31,1,54,37,13,-108,-73,-16,-17,-61, -5,50,-6,-34,-6,-10,53,109,27,-40,23,-73,-29,-52,-4,-37, 
  /* [8][0][][] */ 4,53,-2,-23,14,-94,75,56,-66,49,-5,33,41,-20,60,-69, 50,-73,41,-41,33,-66,-14,24,-90,-7,-127,19,-38,71,-29,-49, 10,-42,-21,-72,19,7,53,65,-33,81,-51,109,121,91,-68,-14, 
  /* [9][0][][] */ -79,7,29,-36,-6,0,9,-15,-120,-16,22,-40,-87,-58,-50,40, -110,-60,17,34,25,14,-8,-57,-19,-56,-84,-55,-22,-15,-18,47, -4,-127,15,48,7,70,-50,-59,-90,-61,-62,-48,1,53,-46,-46, 
  /* [10][0][][] */ 7,-17,-78,-42,37,75,29,-31,-48,-20,-77,53,-30,100,-83,-97, 42,-30,-114,-111,-53,30,-60,64,-15,7,-34,54,57,75,-78,4, 18,53,-127,-95,-35,-93,-54,19,28,-53,31,29,-11,45,9,-69, 
  /* [11][0][][] */ -64,30,-21,61,4,41,-6,-38,-69,-3,-17,-26,-70,-59,-52,53, -72,13,2,12,-85,-23,-79,-19,-52,33,-30,-20,-69,-100,-38,41, -60,32,-10,98,6,81,-32,-38,-3,24,-55,-127,-64,21,-84,79, 
  /* [12][0][][] */ 27,-127,-3,9,-55,46,37,39,-35,-70,-49,-32,-122,-35,41,-64, 39,31,-1,-119,73,-120,-29,-98,-71,64,-44,-57,-65,-75,-73,-100, -93,-50,-78,-107,75,-14,-80,-54,7,-48,-98,-40,-87,-114,-36,48, 
  /* [13][0][][] */ 13,-41,-61,42,14,90,5,-110,-48,-76,-83,32,-19,50,-78,-46, -20,-14,-80,-78,-17,-25,-93,24,-14,0,-35,21,-33,-27,-58,-5, -36,46,-29,-127,-62,-96,-20,10,18,-103,74,24,-49,-23,2,22, 
  /* [14][0][][] */ -16,-41,-31,-50,97,-5,100,0,-127,-64,54,25,0,101,-93,-51, -93,6,-17,-16,123,-9,29,50,-48,-5,-2,-2,49,42,-5,-82, -17,19,40,-42,43,-88,56,41,9,-67,32,-54,-13,63,6,-62, 
  /* [15][0][][] */ -35,-68,34,5,16,-4,-127,-31,-12,-25,-69,-81,-38,-109,-127,44, -52,-51,21,72,90,91,-33,-46,-34,-24,-41,-124,-41,16,13,81, -23,-20,-22,1,-25,44,-47,-52,-33,-29,-86,13,-37,-3,-109,5, 
  /* [16][0][][] */ -60,-43,-103,-102,29,-95,-70,45,-75,78,81,-36,24,7,-46,-65, 69,70,0,-113,34,-23,65,124,-56,-13,-75,-38,62,-6,-26,-127, 32,-33,-49,8,-39,-21,72,57,-26,-21,51,109,-85,83,24,-27, 
  /* [17][0][][] */ 13,-109,-64,-55,-65,-54,-5,25,95,17,22,-17,-25,-19,18,-7, 54,-73,-64,-49,-9,28,-82,25,67,-11,19,-15,24,-94,-80,-52, 34,-61,-94,2,50,5,-53,-24,51,-54,-33,-11,19,-75,-89,-127, 
  /* [18][0][][] */ 55,-61,-37,-44,6,-31,24,74,80,-94,29,-19,32,-69,116,-42, -26,-111,-8,5,-23,33,-6,12,37,-73,48,-71,-39,-51,17,4, 69,-127,23,-75,-45,-8,-44,-33,35,82,41,-59,-41,-22,-35,-34, 
  /* [19][0][][] */ 53,-52,38,-24,-20,-67,80,31,-38,60,50,-10,-82,39,45,-34, 11,7,30,-45,-84,-53,45,58,-106,96,4,0,87,95,-72,-70, 28,-99,52,-31,-127,-11,-28,-26,-50,55,-1,13,49,46,15,-64, 
  /* [20][0][][] */ -12,-14,-65,16,31,-25,-124,2,31,24,0,-25,24,-58,-127,5, -26,1,-71,54,30,74,-32,-32,-56,-13,-37,-38,-33,-11,-64,40, -36,93,7,10,-35,-36,-21,-2,-7,32,-17,-32,-17,-24,-87,48, 
  /* [21][0][][] */ 28,-19,26,-25,-80,-65,47,7,-60,17,-61,89,39,82,-31,33, -59,-104,-43,-94,85,2,-2,81,-127,99,73,4,86,64,-11,-108, 14,12,73,-33,48,-77,34,39,6,35,-59,30,36,108,39,-26, 
  /* [22][0][][] */ 22,-13,12,14,60,-101,70,-54,30,-10,13,-3,10,1,66,-90, 67,-9,49,-85,23,-5,26,-2,-8,-6,-7,13,-6,-21,97,-26, -13,-22,-43,72,127,-82,104,69,-60,24,27,14,-80,-1,-89,-104, 
  /* [23][0][][] */ -54,-36,33,-18,-115,-31,42,-98,-108,-22,2,20,-22,-11,55,-71, 3,-1,-62,-76,-106,41,-101,-113,40,-31,-110,23,-30,28,-30,-59, -32,-125,-25,6,-68,-75,-127,-59,-18,-92,-64,18,-70,0,-86,-8, 
  /* [24][0][][] */ -127,-29,-24,69,38,64,-57,-65,-70,-69,-85,-101,-26,-16,-89,-7, 4,-68,-20,-1,22,50,-77,-78,-8,-25,-59,-17,-82,-12,-71,-44, 39,-15,-69,-64,-27,-39,-28,36,6,-12,-53,79,-26,-54,-60,-27, 
  /* [25][0][][] */ -82,-85,78,-88,53,-98,91,-13,-32,41,66,47,-49,84,-2,-88, 50,16,38,-8,-58,-42,77,-15,-127,47,-1,44,-74,-13,-80,-35, -116,-88,1,-28,9,-103,72,-35,-11,37,-72,8,77,61,32,-68, 
  /* [26][0][][] */ 51,64,-110,62,-93,-43,49,-99,44,-40,-72,-93,36,-37,-36,17, -104,27,-41,29,-29,-94,-89,22,15,-19,5,-23,-49,-21,19,-60, -52,-15,-30,-95,-37,-116,26,-10,-127,-43,61,-75,-55,-36,63,109, 
  /* [27][0][][] */ -13,-39,-117,-23,-33,-40,-34,110,38,-11,-27,100,26,16,29,-47, -47,26,-110,-127,-84,-105,-60,32,3,-43,87,-14,-22,-9,-20,-5, -49,45,25,-42,-65,-109,-89,-14,-46,-46,-6,-7,-2,40,30,49, 
  /* [28][0][][] */ 38,8,40,-61,-4,-64,59,13,-85,-6,-27,28,32,59,29,-23, -13,-127,28,-27,13,11,-41,45,-81,59,-31,79,41,57,-4,-75, 49,21,23,-59,-16,-35,34,22,-40,63,-4,-34,82,41,41,-84, 
  /* [29][0][][] */ -39,33,20,12,-38,-52,-17,-65,-93,-23,-10,-45,-40,-53,-16,49, -48,-49,76,18,-2,2,-12,-33,-30,-22,-42,-40,-13,-49,-27,23, -48,-81,12,49,19,55,-9,-51,-52,-109,-69,-127,-10,12,-57,17, 
  /* [30][0][][] */ 15,31,33,-41,-48,-20,-51,28,1,-98,61,-19,100,-53,-39,24, 60,-49,18,-32,-35,-66,-122,2,-9,80,-72,32,127,-64,19,-21, -12,-18,-3,-69,3,-41,63,-7,-84,12,-9,21,-36,76,101,-47, 
  /* [31][0][][] */ -27,13,-41,-29,62,-52,29,81,-59,39,10,28,56,60,-57,-60, 59,-42,25,9,-31,-62,1,127,-20,30,-64,-26,59,-27,11,-72, -11,-55,5,-21,-50,-39,18,82,38,44,4,34,-6,42,-67,-39, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0047261975705623627, 0.0051840301603078842, 0.0051460363902151585, 0.0071088117547333241, 0.0041842889040708542, 0.0019080537604168057, 0.0051174648106098175, 0.0049220919609069824, 0.0044150813482701778, 0.0063076680526137352, 0.0045480099506676197, 0.005524870939552784, 0.0018355195643380284, 0.0052856691181659698, 0.0036809605080634356, 0.0054753478616476059, 0.0036966798361390829, 0.0057208496145904064, 0.0046743219718337059, 0.0045158318243920803, 0.0058261123485863209, 0.0043689589947462082, 0.0044175633229315281, 0.0021669548004865646, 0.0063941916450858116, 0.0039342162199318409, 0.0046193767338991165, 0.0053173447959125042, 0.0054555311799049377, 0.0069312793202698231, 0.0044346442446112633, 0.0048641772009432316, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 20, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 20, 1, 16, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 10, 16, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 10, 1, 32, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,20,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.028889130800962448, } };
const TfArray<1, int> quant12_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.035630527883768082, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.035630527883768082, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,10,1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.035630527883768082, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,10,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.035630527883768082, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.033455308526754379, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.033455308526754379, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,5,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.033455308526754379, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,160 } };
const TfArray<1, float> quant20_scale = { 1, { 0.033455308526754379, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.23627081513404846, } };
const TfArray<1, int> quant21_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 272, (TfLiteIntArray*)&tensor_dimension0, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension13, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension15, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension16, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension17, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 320, (TfLiteIntArray*)&tensor_dimension19, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
