/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 20.12.2021 13:24:53

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3360;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1287 } };
const TfArray<1, float> quant0_scale = { 1, { 0.044521398842334747, } };
const TfArray<1, int> quant0_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { -916, 674, -2490, -733, -1360, -1548, -1800, -752, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00018232240108773112, 0.00014920539979357272, 0.00015600613551214337, 0.00017474134801886976, 0.00017902589752338827, 0.00015686097322031856, 0.00014604827447328717, 0.00015305084525607526, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -2198, -1201, -1348, -2266, -1986, -2121, -3025, -720, -1997, -1179, -2489, -2537, -2195, 1582, 609, -2818, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 6.9747511588502675e-05, 6.3378407503478229e-05, 8.0411242379341274e-05, 6.8055094743613154e-05, 5.9002682974096388e-05, 6.3342522480525076e-05, 6.078183650970459e-05, 0.00010573826875770465, 5.7555927924113348e-05, 9.0535366325639188e-05, 9.42374681471847e-05, 5.9107849665451795e-05, 6.1891827499493957e-05, 9.5459436124656349e-05, 7.8042859968263656e-05, 6.7046319600194693e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 568, -1768, 1920, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 6.4982523326762021e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*400] = { 
  26, -1, -26, -8, -83, -25, 16, 56, -44, 7, 24, 42, 14, 80, 75, -16, -11, 44, -19, -56, -15, 7, 18, 34, -67, 18, 8, 1, -19, 32, 25, 7, 2, 9, -10, -47, -45, -24, -75, 47, -33, -18, -6, -36, -22, 36, -38, 38, -56, -20, -45, -44, -24, 17, -28, 24, -26, -1, -45, -43, -24, -108, 46, -46, -88, 35, -29, -82, 69, -15, -10, -13, -76, -2, -69, -48, -70, -104, -50, 45, -44, -25, 51, -62, 52, -82, -8, 38, 12, 30, 15, -3, 23, -19, 64, 12, -50, -26, 20, 34, 17, -44, 13, 38, 13, 27, -41, -55, 9, -27, -25, 58, -67, -8, -37, -5, 43, -17, 16, 4, -19, 2, 1, -73, -15, -46, 14, -44, -26, -32, -62, 51, 30, -42, -18, 26, -8, -16, 15, -44, 27, -26, -9, 25, -24, -20, -66, 44, 11, -27, -28, 17, 26, 9, -5, -22, -2, 40, -36, 1, -15, -3, -3, 4, 1, 5, 28, 21, -3, 1, -4, -3, 16, 40, 24, -23, -31, -69, -20, 13, 41, -15, 7, -3, -15, 16, 9, -17, 11, 21, 2, -7, -8, -38, -10, -13, -12, -32, 29, 40, -11, 16, 46, -30, -22, 57, 5, 7, 1, -87, -26, 33, -15, -27, 16, 14, 1, 20, 17, -9, -2, 63, 2, 15, -1, -29, -22, 20, 15, 7, -33, 61, -9, -9, 7, 32, -10, 87, -43, -53, -3, -84, 9, -11, 21, -5, -85, 4, -5, 10, -20, -22, -9, 79, -39, -6, -6, -44, -71, -16, 6, 33, -36, 32, 49, 9, -13, 22, 41, 101, -1, -24, -7, -28, -87, -32, 28, -31, -16, 39, 1, 15, 16, -48, 28, 14, 3, -52, 8, -60, -13, -7, -20, 13, -33, 24, -5, 26, -17, -27, 5, -6, 56, -26, -25, -38, -63, 24, 21, 26, -23, 81, -10, 75, -77, -46, 36, 75, 24, -41, -44, -23, -31, -35, -48, 9, 4, 51, 35, 64, 9, -37, 36, 21, 16, -48, -9, -79, -78, 15, -29, 5, -21, 73, -35, 57, 12, -25, 51, 9, -34, -25, -35, -25, -20, 22, -67, -8, -27, 48, 22, 59, 26, -11, -11, 38, -7, -28, 44, 18, -74, -16, -62, -21, -30, 47, -24, 23, 20, -42, 16, 89, 64, 20, 10, 13, -31, 38, -74, 21, 25, 72, -2, 77, 10, -45, 49, 53, 8, 23, 
  -8, -3, 11, -4, 42, -8, -36, -19, 24, 3, -70, 3, 47, 5, -30, -25, -18, 25, 66, 75, 36, 55, -17, -38, 46, 30, -33, 0, 43, -29, -21, 36, -9, 44, 40, 43, 19, 51, 27, 12, 21, 1, -2, 10, -23, -84, 41, 17, 30, -38, 37, 51, 4, -31, 37, -35, 14, 26, 36, -10, 23, 16, 9, 118, 80, 26, 12, 38, 20, 42, 34, 5, 29, -43, 75, 31, 34, -27, -38, -10, 53, 13, -8, 43, -10, 41, 15, 4, 35, -15, 33, 31, 54, -8, -33, 1, 22, 23, 22, -11, 19, 17, 6, 15, 30, -25, -24, 7, 18, -25, -16, 38, -29, -6, 13, 9, 16, 37, 16, -22, -30, -16, -26, 36, 10, 16, -32, 39, 8, 3, 2, 14, -18, 68, 23, 7, 16, -26, 53, 14, 3, -15, -36, 7, -10, 23, 34, 16, -23, 23, 22, -3, 4, -17, -18, 49, -9, -10, -49, 48, -29, 15, 49, 9, -46, -17, 35, -49, -2, -24, 1, 6, 6, -25, -9, -28, 47, 4, 37, -6, -12, 4, -26, -59, -38, -29, 11, 40, -16, -32, -23, 52, 22, -7, -25, -14, -32, 4, 37, -24, -30, -57, 17, 4, 1, -53, -9, 27, 2, 7, 30, 4, -44, -5, 31, -30, -22, -36, 10, -35, -14, -50, 18, -19, 19, -16, 45, -1, -20, -2, -7, -11, -20, -37, -42, 13, 2, -72, -7, 7, 27, 61, 56, 26, 12, 28, 6, -52, -2, -16, 68, 7, -7, 28, -15, 39, 32, 11, 52, 28, -15, 57, 33, -30, 20, -57, 34, 23, 13, -19, -58, 15, 26, 53, 0, 15, 21, 5, 36, -46, 17, -67, 13, -11, 4, -11, -9, -25, 24, -11, 64, 2, 25, 35, 44, -43, -34, -84, 27, 20, -3, -14, 11, 4, 27, 2, 14, 52, -5, -3, -19, -32, 13, -50, 17, -9, -25, -22, 10, 73, 24, 49, 2, 35, -23, 19, 7, -105, 32, -88, 32, 28, 28, 6, -7, -13, 36, 46, 42, 46, 37, 36, 38, -50, -5, -67, 34, 19, -6, -46, -49, 71, 51, -14, 0, -40, 42, 34, 38, -71, 10, -60, 41, 37, -32, -53, -10, 33, 11, 8, 21, -13, 40, 46, -28, -48, 12, -29, -8, -16, -1, -20, -41, 20, -40, -19, 33, 76, 24, -12, 31, -67, 96, -6, 22, 64, -43, -73, -11, -56, 
  -40, -42, 18, 26, 59, 35, 30, -18, 27, -38, 19, -50, -58, -127, -49, 22, -81, 13, -65, -56, 12, -78, -20, -20, -39, -34, -19, 13, -8, 8, -10, -53, 13, 2, 23, -36, 12, 9, 0, -71, -25, -24, 22, 20, -6, 31, -52, 3, -29, 0, -21, -8, -52, -6, 3, 21, -29, -8, -21, -40, -24, 14, -54, -92, 9, 27, 12, 2, -81, 11, -25, 9, -24, 30, -3, -35, 46, 41, 15, -4, -12, 36, -7, -32, -6, -19, -6, -3, -53, -34, -18, -13, -61, 37, 42, -20, 3, 36, 14, 1, -41, 27, 12, -3, -16, 22, -6, 71, 34, 71, 6, -27, 3, 31, -42, -9, -14, -8, -8, 60, -23, 54, 15, 42, 17, 13, 55, -35, 7, 12, 30, -56, -1, -7, -72, 23, 16, 40, -14, -8, 30, -17, 1, -4, -45, -2, -30, -33, 15, -8, 29, 30, 65, 42, 3, 15, 4, -31, 50, 4, -6, 22, -17, -35, -26, 28, -16, 11, 32, 39, 11, 27, 66, -64, 91, 43, -47, -29, -69, -24, 13, 28, -18, 41, 21, 43, -55, -63, 27, -36, -15, -55, 2, 53, 5, -7, 1, 16, -41, 46, 18, 31, -33, 26, -1, -101, 9, -34, -30, 61, -8, 16, -11, 15, 9, 5, 24, 11, 15, -9, 4, -108, -6, -29, -34, 1, -29, 21, 11, -17, 18, 62, 7, 0, 45, 54, -6, -68, 18, 37, -41, 9, -90, -20, 17, 14, 20, 3, -13, 27, -56, -39, 7, -126, 31, -5, -27, 57, 32, 17, -26, -21, -4, 29, 23, 50, 58, 25, -18, -96, 20, 3, -34, -16, 32, -2, 0, -51, -43, -3, -17, 29, 25, -16, 2, 4, 16, 26, -10, 23, -31, -68, 13, -58, -36, -23, -28, 2, -32, 1, -40, -55, -36, 15, -58, 55, 27, -49, 44, -24, 63, -6, -13, 67, 55, -23, -57, -113, -41, -45, -39, 54, -58, -24, 0, -47, -14, -2, -31, 12, -40, -99, -69, -58, -33, 5, -91, -4, 44, -50, -4, -41, 6, 22, 1, 70, -22, -21, -11, -46, 98, -25, -26, 39, 19, 38, 22, -6, 20, -98, -26, -40, -6, 18, -69, -33, -11, -27, 0, 56, 38, 6, -9, -71, 2, -24, -33, -42, 61, 21, -5, -17, 45, -11, 32, 13, 37, -46, -54, -34, -30, -52, -96, -103, 12, 22, -66, 36, 46, 31, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0031093538273125887, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -49,-9,-74,26,64,4,16,20,58,-16,4,42,-48, 102,-13,-26,-26,-11,-69,-17,-70,85,35,31,127,61, -83,40,-9,-22,-71,-23,-78,8,92,42,-46,-67,38, 
  /* [1][0][][] */ 26,-32,-103,4,34,-22,9,-53,2,89,1,-62,64, 36,-22,13,47,6,29,-22,-32,101,-43,-75,58,57, 11,-16,-127,102,50,-61,28,-11,2,-35,-8,3,-22, 
  /* [2][0][][] */ -67,-60,-41,12,-63,-3,-88,-47,-57,-33,48,84,15, -28,-34,-11,-21,-51,63,17,-101,-72,12,71,-22,-40, -49,-52,-42,-71,-55,44,24,-127,-80,52,48,-38,15, 
  /* [3][0][][] */ -65,34,-43,56,97,-25,19,20,-23,42,33,0,-23, 127,82,-11,21,-22,-67,-50,17,105,127,-67,122,10, -19,-16,-75,61,26,-3,59,-34,1,26,-117,72,-7, 
  /* [4][0][][] */ 17,22,35,9,0,11,46,-30,-55,-11,-13,56,23, 62,0,-11,-33,-35,-11,-8,-23,-16,2,-86,39,14, 30,-33,127,-69,-39,4,105,-36,-61,-103,22,52,-26, 
  /* [5][0][][] */ 78,-17,39,15,20,-13,-1,-31,35,-85,-7,23,76, 14,-47,32,6,85,12,82,17,53,29,-21,-25,-56, 127,-42,-42,48,92,28,-55,7,-17,77,0,-17,-73, 
  /* [6][0][][] */ -52,-41,-37,-127,-4,-12,120,7,-63,79,-70,69,27, -14,34,74,3,35,-17,-27,-87,35,-31,58,-27,-72, -84,-10,127,-107,-52,-89,49,44,20,49,-50,-73,-62, 
  /* [7][0][][] */ -39,-70,6,36,30,8,-2,-50,7,32,-65,-39,17, 127,53,41,-52,-66,7,-69,13,-6,116,123,104,107, -95,-64,82,64,-5,25,57,-52,-50,-80,67,-85,66, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0040951631963253021, 0.0033513186499476433, 0.0035040709190070629, 0.0039248843677341938, 0.0040211202576756477, 0.0035232712980359793, 0.0032804063521325588, 0.0034376918338239193, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -48,-30,-73,93,-7,-57,92,-26, 84,-5,-83,-19,-29,-97,36,14, 55,-62,20,32,13,127,61,43, 
  /* [1][0][][] */ -24,64,-90,-81,-3,-74,70,45, -102,-29,-82,86,-91,60,-63,-30, 73,90,-10,127,30,-37,-57,23, 
  /* [2][0][][] */ -61,9,-22,-7,-16,93,-64,-70, 84,8,-11,127,5,-32,-38,72, 1,-38,-18,-43,-22,43,-6,-5, 
  /* [3][0][][] */ -22,1,-23,31,-48,91,-49,88, -26,-23,-23,127,8,101,54,-16, 28,-61,-15,35,-69,24,47,-39, 
  /* [4][0][][] */ 61,-9,111,15,15,-102,-18,127, -102,-22,24,-56,-81,-93,-6,80, 82,-109,92,70,-70,51,-32,101, 
  /* [5][0][][] */ 64,-49,-102,39,63,87,76,127, -45,-52,-82,63,15,70,-76,1, -48,9,16,-39,33,20,-86,70, 
  /* [6][0][][] */ 74,-16,5,67,-12,60,-22,124, 127,-32,-1,-60,-33,50,-18,-55, -84,31,-36,-30,3,-29,0,-76, 
  /* [7][0][][] */ -80,-99,82,-52,3,27,53,15, -32,-127,-7,-29,69,38,59,-55, -84,-118,-9,-36,44,28,-7,22, 
  /* [8][0][][] */ -18,-74,90,-49,-79,-11,-46,127, -26,-26,-72,122,88,36,33,102, 37,-29,5,-93,-2,-91,90,51, 
  /* [9][0][][] */ -82,-105,30,-87,95,12,-32,-3, -60,-16,88,-127,29,5,67,-25, -93,-73,71,-80,34,-10,23,7, 
  /* [10][0][][] */ 11,13,29,-4,-27,-41,-39,28, 127,16,-3,30,11,13,83,-64, 20,0,-30,-47,-47,-22,55,-18, 
  /* [11][0][][] */ -9,-57,-45,89,-52,-115,62,-1, -34,36,-21,-33,-51,-69,18,121, 40,4,-111,93,46,-122,127,28, 
  /* [12][0][][] */ 49,-25,-69,-5,39,127,57,-73, -12,-42,83,-17,84,-39,89,29, -35,-7,-65,-99,-5,103,19,74, 
  /* [13][0][][] */ -3,5,-75,24,-15,2,62,-97, -84,-32,-34,-16,69,21,8,-127, -51,-70,-101,23,22,48,90,-89, 
  /* [14][0][][] */ -9,36,11,19,-95,45,-44,-93, 14,33,-74,-25,88,-25,-32,-41, -45,127,37,-111,1,17,24,-24, 
  /* [15][0][][] */ 82,59,-22,110,-49,-65,-61,-8, -39,21,-9,-99,8,127,89,-31, 85,-80,29,-91,-64,21,-75,41, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0031962145585566759, 0.0029043471440672874, 0.0036848851013928652, 0.0031186584383249283, 0.0027038273401558399, 0.0029027026612311602, 0.0027853578794747591, 0.0048455088399350643, 0.0026375290472060442, 0.0041488283313810825, 0.0043184789828956127, 0.0027086467016488314, 0.002836223691701889, 0.0043744761496782303, 0.0035763529594987631, 0.0030724308453500271, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 99, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.044521398842334747, } };
const TfArray<1, int> quant12_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.021821912378072739, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.021821912378072739, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.021821912378072739, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.021821912378072739, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.020899044349789619, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.020899044349789619, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.020899044349789619, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.020899044349789619, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.094145447015762329, } };
const TfArray<1, int> quant21_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1296, (TfLiteIntArray*)&tensor_dimension0, 1287, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1287, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1296, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
