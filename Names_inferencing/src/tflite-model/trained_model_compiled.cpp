/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 20.12.2021 12:37:05

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 5968;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,2587 } };
const TfArray<1, float> quant0_scale = { 1, { 0.044016048312187195, } };
const TfArray<1, int> quant0_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 800, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { -637, -2229, -821, -62, -922, -1746, -1034, -1376, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00017359120829496533, 0.00011244782945141196, 0.000147052007378079, 0.00015061718295328319, 0.0001352112740278244, 0.00012876061373390257, 0.00016133220924530178, 0.00017723695782478899, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -340, -1086, -377, -1920, -1667, -408, -537, -37, -788, -480, -779, -2424, -247, 195, -849, -909, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 9.9127719295211136e-05, 9.1088331828359514e-05, 0.00010099598148372024, 6.0200694861123338e-05, 7.2507995355408639e-05, 8.7545078713446856e-05, 0.00010082561493618414, 8.8536493421997875e-05, 7.2732749686110765e-05, 9.3023169029038399e-05, 9.0123539848718792e-05, 7.3682451329659671e-05, 7.49881801311858e-05, 0.00012009261263301596, 8.4413128206506371e-05, 7.1392714744433761e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 108, 371, -592, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 8.3972248830832541e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*800] = { 
  38, 0, 6, 13, 17, 8, 39, 29, -17, 20, 14, 26, 56, 56, 41, 36, -19, 49, -10, -11, -4, 49, 46, 12, -22, 14, -26, -9, 34, 42, -7, -2, -10, 39, 33, -7, -24, 58, -5, 21, -15, -20, -22, -48, -1, 9, -21, 15, -6, -26, 14, -8, -34, 14, 15, 15, -23, 16, -3, -50, -7, -7, -5, 34, 7, 22, 22, 5, -12, 26, -4, 40, -8, -35, -19, -3, -12, 16, -8, -19, 14, 23, 29, 20, -15, 26, 9, 43, -1, 7, 14, -6, 34, 40, 40, 2, -35, 24, 23, -2, -26, -6, 21, 23, -17, 23, -46, -36, 29, 13, 14, -26, -41, -20, -5, -21, 10, -14, 18, -9, -43, 19, -41, -36, 13, 34, 19, -31, -14, 5, 27, 46, 7, -9, 2, 36, 0, -3, -1, -14, 23, 16, 9, -12, -27, 16, -26, 5, -12, -19, 2, 18, 2, 33, -30, 3, 3, 45, 15, -41, -31, 16, 23, -6, -33, -5, 7, 6, -14, -6, -8, -16, 20, -9, 33, -23, -23, 10, -21, -2, 10, -8, 17, -18, -11, 4, 7, 2, 17, -19, 26, -24, -7, 20, -33, -9, -28, -6, 11, 15, -8, -2, 6, -25, -26, -25, -21, -5, 8, -10, 43, 26, -40, -2, 11, -23, -17, 11, 6, -30, -1, 15, 20, -15, -13, 15, 35, 8, -19, 11, -13, 32, -13, -17, -24, 17, -14, 12, -3, -33, -7, 22, 10, -28, -5, 3, -16, 0, -26, 11, -6, -11, 2, 14, 0, -20, -11, 17, 7, -20, -19, 15, 3, -10, -4, 2, -4, 23, 27, 3, 9, 1, -9, 11, 0, 1, -13, 5, 17, 55, -11, -2, 12, -34, 7, -21, 26, -12, 16, -8, -17, 0, -31, 7, -3, 26, -18, -2, 12, 18, 16, -1, 33, -29, -29, 8, -12, 9, -30, -22, 13, 32, -28, 29, -24, -27, 17, -10, 17, -25, -28, 22, -88, -14, -34, -6, 4, -25, -27, -14, -18, -19, 5, -2, 16, -56, -9, -3, 19, 18, -39, -32, 4, -10, -29, 24, 11, 6, 9, 4, 6, -13, 0, 22, 10, 3, -36, -20, 6, -19, -9, 7, 16, 18, -19, 24, 6, 25, 17, 31, 2, -14, -22, -9, 4, 6, -24, 3, -3, -26, -8, 19, 19, 12, -21, -6, 9, -11, -32, 8, 32, -11, -2, 29, -30, -4, 6, 14, 17, -18, -1, -18, 0, 6, -36, 6, 24, 19, -10, 17, -23, -27, 1, -13, 29, 5, -25, 18, 3, 7, -54, -3, -3, -4, -6, -5, -5, -13, 7, -3, 2, -15, 14, -32, -15, -6, 2, 19, -12, 5, 0, -13, -17, -8, 46, 2, -6, 30, 2, -1, -20, -14, -16, 25, 26, 19, 10, 23, -19, -11, 14, -4, -3, -1, -7, -7, -18, -9, -48, 10, 19, 46, -19, 29, -22, -21, 20, -15, 20, 4, -28, 10, 20, 9, -33, 31, 30, 28, -31, 40, -34, -30, 18, -17, 35, 13, -20, -1, -11, 0, -33, 36, 8, -8, -43, 17, -1, -23, 11, 15, 0, -23, -25, -10, 22, 15, -8, 9, 7, -11, -12, 47, -19, -35, 6, 10, 30, 12, 26, -6, 7, -4, -5, -3, 35, 4, -25, 36, -14, -29, 7, 34, 23, -3, 39, -25, 6, 11, -35, -19, 32, 12, -31, 43, 10, -8, 23, 40, 20, 24, -18, 9, -54, 13, -47, 10, 32, 16, -34, 24, 0, -34, 17, 42, 28, -17, -45, -6, -6, 2, -24, 14, 19, 19, -34, 25, -25, -29, 7, -13, 44, -5, -17, 5, 22, -4, 10, -4, -18, 26, -13, 11, 31, 19, 9, -9, 30, -13, -3, -22, -22, 11, -4, -8, -7, 9, -52, 40, -15, -9, 32, -7, 48, -42, -18, 13, -26, 27, -30, 7, 37, 7, -23, 22, -30, -36, 27, 28, 36, -28, 3, -30, 28, 27, -12, -5, 21, -6, -25, 7, -29, -40, 25, 41, 30, -28, 8, -51, -22, 10, -5, 6, 9, 23, -30, 43, 11, -24, 8, 64, 3, -7, 9, 9, 21, 12, -12, 19, 9, -16, -30, -5, -50, -18, 0, 38, 9, 9, -49, 22, 6, 25, -21, 20, 42, -20, -14, -2, -18, -24, -24, 0, 37, -10, 7, 24, 15, 12, 7, 26, 37, 11, -3, 47, -15, -1, 45, 43, 48, -11, 21, -17, 4, 21, -9, 20, 31, 8, 13, 20, 6, -5, -4, 33, 20, 18, 33, 8, 33, 19, 13, 29, 32, 15, -13, 31, -14, -22, 44, 60, -5, -18, 17, -50, -12, 14, 11, 36, 1, -4, -21, 9, -12, -14, 26, 40, 37, 17, -1, -26, -3, 12, -31, 25, 35, 14, -29, 36, -8, 19, 15, 39, 51, -19, 3, 26, -3, 5, -43, 49, 64, -4, -43, 40, -7, 15, 49, 15, 32, 21, 
  -20, -8, 7, -10, 10, -16, -7, 6, 24, 2, -9, 3, -6, -49, -15, -14, -22, 14, -10, 12, 14, -13, -19, -19, -7, 28, -12, 2, -2, -34, 8, -4, 1, 9, -1, 0, 6, -29, 9, 14, -1, 16, 19, 12, -5, -23, 23, 26, -4, 1, -24, -3, 1, -27, -5, -18, 15, -4, -5, 0, 9, -50, 18, -2, 13, 33, -49, -17, 14, -10, 27, -15, -16, 37, 20, -1, 37, -57, -1, 9, 3, 22, 5, -9, 15, -21, 0, -16, 4, 14, -3, 13, 9, -28, 24, 18, -3, -8, 26, 17, 13, -3, 17, 19, 14, 0, -19, 3, 19, -18, -16, 35, -8, 23, -17, 4, 0, 28, 33, 6, 1, 13, -2, 15, -5, -21, 17, -7, 6, 21, -2, -2, 4, 1, -12, -7, 20, -9, 20, -6, 12, -51, -30, 12, -12, 2, -12, 10, 12, 0, 25, -11, 18, -7, -4, 30, -1, -35, -27, 33, -15, 17, 39, 5, -18, 11, 25, 8, 10, 0, -2, 6, 2, 7, 17, 1, 2, -31, 30, -9, 14, 3, -20, 0, -12, 5, -14, -20, -6, -14, -33, 15, -7, 11, 10, 2, 1, 8, -6, 17, 8, -14, 25, 25, 22, -33, 14, 13, -11, -6, -31, 18, -8, -18, -1, -6, 11, -18, 15, -12, -4, -33, -4, -25, 14, -41, -11, 4, 5, -14, -12, 6, -5, 1, 14, 30, -1, -37, -17, 6, 15, -1, -17, 26, 19, 9, -15, -18, 12, 2, 30, -10, 2, 34, -17, 19, 18, -38, -1, 18, -12, 22, -23, 12, 26, -9, 21, 11, -9, -10, -27, 21, 1, -24, -38, -5, 25, -20, 3, -24, 21, -31, 32, -19, 4, -5, -14, -1, 8, -16, 17, -18, 35, 9, -12, -28, -2, -22, -9, -11, -11, -27, -22, 20, 4, -26, 2, -1, 32, 1, -11, 14, 20, -7, 8, -3, -53, -18, -31, 47, 8, -7, 9, 3, -10, -6, -10, -20, 35, -7, 33, -19, -15, -1, -27, -3, 38, -25, 17, 7, 25, 21, -8, 14, -12, -14, 27, -16, -7, -16, -15, 30, 60, -42, 12, -1, 11, 8, -12, -17, 27, -31, 63, 15, -29, 12, -30, 2, 37, -7, -11, 9, 15, 14, -32, 16, 27, -35, 32, -8, -18, -5, -11, 19, 4, -11, 22, 37, 1, -6, -8, -3, 38, -15, 44, 37, -33, -33, -7, 9, 34, -2, 10, 23, 53, 7, 11, 26, 22, -4, -16, -10, -24, 23, -10, -6, 35, -5, 59, -1, 6, 7, -39, -10, 11, -14, 7, -6, -12, 69, -41, -9, 44, -10, -1, 19, 19, 15, -15, 6, 28, -14, 0, 42, -46, 25, -3, -6, 12, -14, 10, -1, 20, -7, -17, -25, 21, -3, 8, 20, -15, -10, -41, 3, 29, -11, 18, -12, 26, 5, -4, -10, 28, -25, 21, 1, -32, 23, -29, 4, -5, -6, 33, -16, 24, -4, -32, 1, -5, -9, 18, -7, -2, -31, -12, -17, -7, -25, 10, 27, 15, 18, -41, 17, 6, -25, 13, 18, -33, -22, -22, -12, -3, -35, -47, -17, 36, 6, -25, 12, 7, -2, 43, 0, -23, -37, -24, -15, 13, -37, -2, 0, 12, 16, -13, 38, 31, -24, -5, 20, -19, -34, -18, 13, 15, -23, 15, 6, -2, 14, -2, 8, 1, -17, -13, 4, -32, -9, -9, -1, -15, -21, 33, -4, -2, 16, -21, -3, 19, -6, 26, 0, -34, -48, -38, 34, 21, -32, -13, 21, 8, 20, -31, 4, -9, -28, 25, -13, -26, -26, -27, 9, -1, 5, -15, 9, 22, -2, -24, 10, -1, 14, -15, 9, -1, -4, -10, 36, -12, -6, -3, 3, 29, -22, -39, 33, 2, -13, 19, 1, -13, -17, -25, 29, 18, -22, 20, 9, -3, 29, -27, -1, 11, -42, 29, 11, -34, -59, -23, 28, 13, -21, 3, -25, 8, 9, 10, -5, 7, -23, -2, 1, -18, -59, -14, 19, 10, -35, 2, 34, 19, -10, -9, -14, 23, 6, 32, 10, 10, -53, 6, -6, 10, -10, -27, -13, 9, -41, -28, -7, 1, 2, 29, 28, -3, 2, 25, 30, 4, 10, -1, -18, -14, -42, -18, -4, 4, -34, 27, 40, -6, -21, -8, 2, 10, -5, -6, -8, 19, -12, -9, -18, 28, 13, 20, 26, 8, -35, -5, -9, -2, 8, -26, 2, 23, -10, -17, -17, 21, 29, -19, 5, 7, -20, 3, 19, -19, -12, -3, -5, 13, 8, -6, -21, -6, 11, 0, -8, -6, -34, -12, -11, 0, 20, -5, -8, -15, -25, -1, 5, 11, 9, 2, 3, -16, -57, 21, 22, -37, 35, -25, -20, 21, -2, -19, -17, -20, 9, -2, 23, -1, -32, -19, -7, 2, 26, -13, -4, -3, -17, 2, -37, -4, 12, 2, -14, 1, -30, 7, 18, 
  -28, -22, -8, 10, 9, 20, -47, -24, -12, -49, -45, -34, -44, 18, -30, -44, -18, -17, 29, -6, 18, -23, -58, 3, 6, -46, 11, 17, -17, 4, -20, 14, 7, -6, 19, -6, 12, 18, -45, -27, 1, -23, 7, 31, -28, -6, -41, -6, -12, -21, 4, 23, -11, 4, 5, 10, -16, 14, -1, -13, -14, 30, -10, -17, 7, -3, 41, 6, 20, 19, -28, -17, -3, -31, 14, -21, -16, 13, -46, 25, -4, -34, -25, -31, 24, -31, -9, 6, 11, -41, 22, 10, -15, 4, -50, -30, 27, 11, -19, -7, 23, 16, -33, -11, 24, -17, 20, 48, -13, 29, -21, 29, -11, -4, -10, 20, 24, -7, -55, 31, -11, -12, 21, 28, 1, -14, -38, 22, 5, -56, -45, -37, -7, 32, -23, 14, -8, 11, 23, 6, -4, 2, -8, 16, -5, -15, 14, 5, -3, 18, -26, 20, 38, -4, 13, -2, -13, 1, -21, 32, 14, -20, -43, -12, 0, -5, -2, -35, 18, 13, 22, 33, 37, -23, 7, 11, 18, -26, -44, 2, -5, 21, -20, 1, -3, -5, -7, 11, 5, 8, -13, 10, 32, -32, -4, -18, -5, -7, 21, 1, -21, -6, -15, -11, -19, 25, 5, -8, -6, 15, 4, -11, -4, 20, 37, 21, -7, 7, 2, 6, -6, 1, 3, 24, -6, 9, -13, 15, 9, -1, 15, 33, 3, -17, 4, 7, 7, 8, 10, 24, -13, -6, 11, -5, 13, 19, 3, -10, -7, -1, -16, -7, -11, -43, 9, 22, -9, 53, 22, 21, 8, 16, 27, 12, 33, 3, 37, 14, 14, 19, -7, -31, 11, 41, 23, 3, 17, -20, -27, -40, -8, 11, -20, 12, 8, 37, -3, -17, -12, 4, 21, -14, -2, -19, 12, -21, -28, -17, -15, -6, -18, -10, 19, -6, -4, 40, 7, 31, 20, 22, 15, -20, 5, 29, 21, -20, 23, 2, 18, -31, -14, 53, 11, 4, -5, 11, 12, 1, 12, 5, -18, -17, 24, -12, 11, 17, -96, 24, -23, -5, 15, 15, 29, 9, 18, 24, -26, 0, 22, -44, 21, 5, -106, 32, -28, -1, 30, 27, 37, -25, -23, -1, -66, -11, -20, -127, 9, -36, -41, 32, 13, -16, -10, -28, -3, -64, -35, 22, 5, 9, 40, 22, 30, -11, 6, 24, -3, 32, -26, -22, -1, -22, -17, -1, 2, -1, 3, 25, 16, -8, 18, 11, 33, 0, -34, -14, 25, -62, -9, -11, 20, 1, 15, -8, -1, -19, -51, 44, -45, -49, -11, -55, 35, -15, 7, 0, -27, -35, 11, -42, 31, 35, -56, 14, 3, 21, -29, -13, -14, -61, -34, 7, 2, -28, 22, -35, 18, -14, -28, 21, -20, -13, -7, -17, 2, -11, -11, -5, -24, -8, 6, 14, -3, -25, 1, 22, 10, -14, -7, -35, -22, -14, -3, 14, -3, -14, 18, 14, -10, 9, 17, 28, -48, -39, -3, -26, 22, -5, 13, -11, -28, 13, 15, 17, 5, -2, 3, 40, -5, -4, 7, -24, 21, -57, 0, 31, 18, 5, 18, 5, 6, 12, -9, 48, 67, 9, 32, -1, 10, -18, 10, 2, -30, 14, 7, 38, -2, -5, -17, 16, -14, -42, -21, -6, 0, -36, -9, -18, -40, -3, 14, 15, 8, -6, -28, 22, 5, -25, 16, -63, 17, -62, 6, -8, -37, -14, -3, -28, 7, -4, -27, 2, -35, 7, 19, -48, -27, -45, 5, 1, 11, 2, -33, 10, -5, 10, -11, 15, 26, 10, 14, -15, 7, -53, 15, -43, -10, 27, -26, 10, 11, 6, -15, -1, -17, -2, 23, -2, 7, -23, -6, -10, 6, -13, 2, -31, -35, 16, 10, 13, 12, 6, -1, -32, 27, -37, -4, -22, 34, 9, -41, -25, 21, -30, -25, 18, 9, -5, 29, -16, -3, -24, 27, 15, 10, 29, 1, 31, -18, -25, -11, -6, -12, -31, 1, 3, -5, 9, 22, -38, 7, 24, -14, 13, 20, -15, -9, 25, 16, -46, 3, -12, 6, -35, 13, -28, 14, 15, 8, -12, -33, -14, -10, 31, 11, -31, -2, -22, 16, -47, -11, -9, 4, 0, 7, -54, -11, 19, 7, 9, -10, -21, 22, -13, -24, -1, -4, -18, 43, 8, -29, -50, 1, 1, 8, -35, 8, -5, -34, -1, -28, -30, 27, -34, 25, -33, -30, -3, -5, -40, -6, 15, 3, -55, -31, -14, 6, -16, -46, -15, -45, -32, -7, 7, 28, -31, 7, 14, -39, -7, 17, -52, -14, -37, -4, -28, 11, 27, -30, -31, -57, -15, 10, -9, 7, 40, 34, -15, -42, -43, 29, -57, 2, -11, -23, 34, -27, 6, -4, -80, -26, 3, -4, 5, -67, 27, 1, -29, 17, -10, -63, 1, -10, -8, -12, -74, -46, -37, 0, -27, -29, -8, -14, -17, 21, 15, -38, -26, -48, -42, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,800 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0034326689783483744, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -100,24,7,52,66,12,22,61,105,-11,11,44,26, 12,-50,-91,-55,-70,-41,-17,-49,79,-9,18,41,8, -127,-16,-13,-35,-49,32,-42,-18,89,-13,-29,-44,-7, 
  /* [1][0][][] */ 46,-29,-40,-125,-64,-71,-56,-75,41,57,-86,-53,-37, 108,-79,49,-115,-89,-70,-26,-93,52,24,-127,-55,-57, 42,-4,-62,-9,-57,-46,-59,-112,43,-46,-87,-37,-23, 
  /* [2][0][][] */ -22,-127,-91,52,-122,-54,-100,34,-19,-66,-39,59,-3, 0,-17,-61,60,-17,36,36,-77,15,5,11,-18,10, -32,-123,-55,31,-51,40,57,-80,-39,19,-11,-25,21, 
  /* [3][0][][] */ -69,77,-50,37,31,13,70,40,-11,27,89,26,18, 60,122,-124,25,-34,-55,-20,21,127,105,-72,69,13, -21,32,-80,67,14,47,75,-53,-10,8,-7,98,21, 
  /* [4][0][][] */ 16,-37,21,7,83,-52,20,25,-46,6,12,127,11, 79,-39,-43,-7,-25,-29,-48,22,-19,-33,-45,28,-1, 28,-54,97,-106,11,-94,95,-13,-66,-116,94,120,-55, 
  /* [5][0][][] */ 51,-59,80,-1,-51,-35,59,-55,75,-10,11,0,4, 58,-127,95,-21,-17,-11,87,-19,66,95,9,-37,-65, 84,-126,77,7,0,37,29,-15,19,111,9,7,-92, 
  /* [6][0][][] */ -89,-67,-127,-70,-48,37,101,-31,-33,45,-24,49,13, -56,11,38,42,-14,4,0,-7,40,35,42,9,-57, -103,-15,-2,-62,-87,-29,-30,35,2,39,-4,-23,-50, 
  /* [7][0][][] */ -22,-127,-22,7,54,6,-36,-30,-49,13,-68,-21,27, 46,19,24,-22,15,54,-42,15,-41,26,32,59,75, -69,-123,23,54,1,32,3,-59,-53,-49,29,21,39, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0039438162930309772, 0.0025547007098793983, 0.0033408724702894688, 0.0034218695946037769, 0.0030718629714101553, 0.0029253105167299509, 0.0036653042770922184, 0.0040266439318656921, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -18,-8,-57,69,-55,-71,68,-75, 127,15,-50,-8,-22,-69,30,-84, 71,-6,53,51,46,28,38,-37, 
  /* [1][0][][] */ -100,117,-86,-127,-8,19,27,-21, -106,-18,-42,-43,-55,41,-53,-59, -6,107,11,27,20,-17,-86,-53, 
  /* [2][0][][] */ -63,24,-109,-12,-6,33,-53,-33, 80,-22,-46,127,5,-46,-49,80, -3,-54,-40,-34,-21,0,7,26, 
  /* [3][0][][] */ -113,22,23,-13,-19,91,-72,66, -6,-67,10,127,85,84,72,-53, 21,-88,60,29,-67,73,61,-91, 
  /* [4][0][][] */ 28,24,85,-17,41,-85,-46,127, -72,-31,58,-37,-86,-92,19,109, 96,-69,106,96,-80,14,-79,102, 
  /* [5][0][][] */ 55,-51,-127,27,88,95,10,70, -47,-56,-97,41,42,81,-93,-56, -22,-14,-12,28,60,59,-92,12, 
  /* [6][0][][] */ -12,24,12,-20,12,57,-70,9, -28,-3,-3,-127,2,97,-60,-86, -88,87,-23,-103,56,4,-32,-45, 
  /* [7][0][][] */ -52,-65,62,-13,-40,127,66,2, 60,-69,-64,-8,49,94,86,-100, -63,-88,-82,-15,77,24,-42,41, 
  /* [8][0][][] */ -42,-46,127,-27,-54,-58,-21,107, 7,-34,-75,62,79,-25,53,109, 38,-15,72,-104,6,-72,98,61, 
  /* [9][0][][] */ -81,-66,17,-60,32,80,-82,-44, -41,97,96,-127,-14,66,35,-72, -106,6,54,-31,-26,42,-9,-17, 
  /* [10][0][][] */ -5,-44,34,-4,-6,-57,-66,11, 127,8,40,10,81,-26,86,-53, 42,4,17,-89,-23,-31,121,-15, 
  /* [11][0][][] */ -14,-39,-36,39,-91,-98,17,-7, 0,86,101,-70,-64,-74,39,127, -5,75,15,25,114,-73,80,-11, 
  /* [12][0][][] */ 21,74,-91,-116,16,120,15,-123, -47,4,81,-71,31,-72,16,-21, -39,40,-32,-127,-22,125,-24,-1, 
  /* [13][0][][] */ 12,-80,-67,80,-62,-77,19,-41, -6,-114,-8,10,3,-14,-32,-11, 4,-127,-65,60,-51,28,57,-15, 
  /* [14][0][][] */ -37,24,64,-47,-127,114,-24,-106, -16,45,-46,-78,58,-1,-24,-71, -81,82,34,-100,-26,90,-21,-44, 
  /* [15][0][][] */ 97,41,-24,64,-10,-94,-127,20, 7,-2,-45,-91,117,38,76,51, 102,-54,37,-115,19,23,-116,51, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0034674352500587702, 0.0031862217001616955, 0.0035327861551195383, 0.0021057885605841875, 0.0025362914893776178, 0.0030622805934399366, 0.0035268268547952175, 0.0030969597864896059, 0.0025441532488912344, 0.0032539013773202896, 0.0031524738296866417, 0.0025773732922971249, 0.0026230469811707735, 0.004200776107609272, 0.0029527265578508377, 0.0024972793180495501, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 199, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 199, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 100, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 100, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,199,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.044016048312187195, } };
const TfArray<1, int> quant12_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,199,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.028588196262717247, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,199,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.028588196262717247, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,100,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.028588196262717247, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.028588196262717247, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,100,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.024462670087814331, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,100,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.024462670087814331, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.024462670087814331, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,800 } };
const TfArray<1, float> quant20_scale = { 1, { 0.024462670087814331, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.088632650673389435, } };
const TfArray<1, int> quant21_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2592, (TfLiteIntArray*)&tensor_dimension0, 2587, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2587, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2592, (TfLiteIntArray*)&tensor_dimension13, 1592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 1592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension15, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension17, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension19, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
